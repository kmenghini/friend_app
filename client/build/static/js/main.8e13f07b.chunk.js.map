{"version":3,"sources":["images/logo.svg","components/sample-component/sample-component.jsx","app/app.jsx","serviceWorker.js","index.js"],"names":["module","exports","SampleComponent","state","sampleResponse","this","callServer","table","console","log","axios","get","params","then","res","setState","data","catch","err","name","Component","App","response","post","responseToPost","callApi","a","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","express","className","src","logo","alt","href","target","rel","onSubmit","type","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,uPCI9BC,EAAb,4MACEC,MAAQ,CACNC,eAAgB,oBAFpB,kEAMIC,KAAKC,WAAW,YANpB,iCASaC,GAAQ,IAAD,OAChBC,QAAQC,IAAR,kCAAuCF,IACvCG,IAAMC,IAAI,QAAS,CACjBC,OAAQ,CACNL,MAAOA,KAGVM,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEX,eAAgBU,EAAIE,UAChDC,OAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAjB9B,+BAqBI,OACE,4EAEE,2BAAIb,KAAKF,MAAMC,eAAe,GAAGe,WAxBzC,GAAqCC,aC0EtBC,G,kNAtEblB,MAAQ,CACNmB,SAAU,GACVC,KAAM,GACNC,eAAgB,I,EASlBC,Q,sBAAU,8BAAAC,EAAA,sEACeC,MAAM,cADrB,cACFL,EADE,gBAEWA,EAASM,OAFpB,UAEFC,EAFE,OAGgB,MAApBP,EAASQ,OAHL,sBAG2BC,MAAMF,EAAKG,SAHtC,gCAKDH,GALC,2C,EAQVI,a,uCAAe,WAAMC,GAAN,iBAAAR,EAAA,6DACbQ,EAAEC,iBADW,SAEUR,MAAM,aAAc,CACzCS,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBR,KAAMS,KAAKC,UAAU,CAAEhB,KAAM,EAAKpB,MAAMoB,SAP7B,cAEPD,EAFO,gBASMA,EAASkB,OATf,OASPX,EATO,OAWb,EAAKd,SAAS,CAAES,eAAgBK,IAXnB,2C,wHAdM,IAAD,OAClBxB,KAAKoB,UACFZ,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEO,SAAUR,EAAI2B,aAC1CxB,OAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,Q,+BAyBpB,IAAD,OACP,OACE,yBAAKwB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,2BAAI3C,KAAKF,MAAMmB,UACf,0BAAM2B,SAAU5C,KAAK4B,cACnB,2BACE,oDAEF,2BACEiB,KAAK,OACLC,MAAO9C,KAAKF,MAAMoB,KAClB6B,SAAU,SAAAlB,GAAC,OAAI,EAAKnB,SAAS,CAAEQ,KAAMW,EAAEa,OAAOI,WAEhD,4BAAQD,KAAK,UAAb,WAEF,2BAAI7C,KAAKF,MAAMqB,gBACf,kBAAC,EAAD,W,GAjEUJ,cCKEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACL5D,QAAQ4D,MAAMA,EAAMpC,c","file":"static/js/main.8e13f07b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nexport class SampleComponent extends Component {\n  state = {\n    sampleResponse: 'response from db',\n  };\n\n  componentDidMount() {\n    this.callServer('sample')\n  }\n\n  callServer(table) {\n    console.log(`getting data from table ${table}`)\n    axios.get('/test', {\n      params: {\n        table: table,\n      },\n    })\n    .then(res => this.setState({ sampleResponse: res.data }))\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div>\n        This is a sample response from the database:\n        <p>{this.state.sampleResponse[0].name}</p>\n      </div>\n    );\n  }\n\n}\n\n","import React, { Component } from 'react';\n\nimport logo from '../images/logo.svg';\nimport { SampleComponent } from '../components';\n\nimport './app.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n  \n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n  \n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n  \n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n        <SampleComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}